#pragma once
#include <stdint.h>
#include <stdbool.h>

//
// Export all variables from version.c (autogenerated at compile-time)
// Look for git_version.cmake if you want to add any new ones before
// modifying this file!
//

#define VERSION_MAGIC 0xDF7F9AFDEC06627C

// Common flags
#define VER_ENG_FLAG_OFFSET 0
#define VER_DIRTY_FLAG_OFFSET 1

// Bootloader specific flags
#define VER_IS_BOOTLOADER_OFFSET 2
#define VER_SIGNATURE_SUPPORT_OFFSET 3
#define VER_ENCRYPTION_SUPPORT_OFFSET 4

#define MAX_VERSION_STR_LEN 96

// Struct for ELF Note sections (see linker file for placement)
typedef struct {
    uint32_t namesz;
    uint32_t descsz;
    uint32_t type;
    uint8_t data[0];
} ElfNoteSection_t;

// Struct with firmware version information
typedef struct {
  uint64_t magic;           // Magic number to identify this as a valid versionInfo_t
  uint32_t gitSHA;          // git SHA for image
  uint8_t maj;              // Major version
  uint8_t min;              // Minor version
  uint8_t rev;              // revision
  uint8_t hwVersion;        // Hardware version (0 for don't care)
  uint32_t flags;           // Various flags (specified above)
  uint16_t versionStrLen;   // Version string length
  const char versionStr[MAX_VERSION_STR_LEN]; // Version string
} __attribute__((packed)) versionInfo_t;

// Struct for entire note, which includes note header, name, and data
typedef struct {
  ElfNoteSection_t note;
  // NOTE - DO NOT CHANGE STRING, SIZE MUST BE MULTIPLE OF 4
  const char name[8]; // "VERSION" + \0
  versionInfo_t info;
} versionNote_t;

extern const versionNote_t versionNote;

#ifdef HAS_NOTECARD
extern const char *NOTE_FW_STR;
#endif

// TODO - add accessor functions here (or in version_util.c)
